<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:Syncfusion.Windows.Tools.Controls;assembly=Syncfusion.Shared.WPF"
	xmlns:skin="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
	xmlns:t="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	>

	<!--#region Default Font-->
	<FontFamily x:Key="Default.Font">Poppins</FontFamily>
	<Style TargetType="TextBlock">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="TextBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="Label">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="Button">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="ComboBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="CheckBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="RadioButton">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="MenuItem">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="GroupBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="TabItem">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="ToolTip">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="ContextMenu">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="PasswordBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>

	<Style TargetType="RichTextBox">
		<Setter Property="FontFamily" Value="{DynamicResource Default.Font}" />
	</Style>
	<!--#endregion-->

	<!--#region Styles for Title region on pages-->
	<Style x:Key="DefaultTitle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="Margin" Value="10" />
	</Style>

	<Style x:Key="DefaultSubTitle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="16" />
		<Setter Property="FontStyle" Value="Italic" />
		<Setter Property="Margin" Value="10" />
	</Style>

	<Style x:Key="DefaultTitleLine" TargetType="Path">
		<Setter Property="Canvas.Left" Value="5" />
		<Setter Property="Canvas.Top" Value="-5" />
		<Setter Property="Data" Value="M61,125 L193,28" />
		<Setter Property="Fill" Value="Blue" />
		<Setter Property="Height" Value="5" />
		<Setter Property="Stretch" Value="Fill" />
		<Setter Property="Stroke" Value="Red" />
		<Setter Property="StrokeThickness" Value="5" />
		<Setter Property="Width" Value="250" />
	</Style>

	<Style x:Key="Title" TargetType="TextBlock">
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="Grid.Column" Value="1" />
		<Setter Property="Grid.Row" Value="0" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<Style x:Key="SubTitle" TargetType="TextBlock">
		<Setter Property="FontSize" Value="16" />
		<Setter Property="FontStyle" Value="Italic" />
	</Style>

	<Style x:Key="TitleLine" TargetType="Path">
		<Setter Property="Data" Value="M61,125 L193,28" />
		<Setter Property="Fill" Value="Blue" />
		<Setter Property="Grid.Column" Value="1" />
		<Setter Property="Grid.Row" Value="1" />
		<Setter Property="Height" Value="5" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Stretch" Value="Fill" />
		<Setter Property="Stroke" Value="Red" />
		<Setter Property="StrokeThickness" Value="5" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Width" Value="250" />
	</Style>
	<!--#endregion-->

	<!--#region Space borders on pages and in stackpanels etc-->
	<Style x:Key="MainBorder" TargetType="Border">
		<Setter Property="Padding" Value="10" />
	</Style>

	<Style x:Key="InnerBorder" TargetType="Border">
		<Setter Property="Padding" Value="5" />
	</Style>

	<Style x:Key="TextBlockBorder" TargetType="{x:Type Border}">
		<Setter Property="Background" Value="#FFEEEEEE" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CornerRadius" Value="3" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<!--#region Textlock that is vissible if valueShow is checked-->
	<!--  If the ValueShow checkbox is unchecked the style will HIDE the element with the style, and make visible if checkbox is checked  -->
	<Style x:Key="HideOnNotShowTextBlockBorder" TargetType="Border">
		<Setter Property="Background" Value="#FFEEEEEE" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CornerRadius" Value="3" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />

		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Textlock that is vissible if valueShow is unchecked-->
	<!--  If the ValueShow checkbox is checked the style will HIDE the element with the style, and make visible if checkbox is unchecked  -->
	<Style x:Key="HideOnShowTextBlockBlock" TargetType="Border">
		<Setter Property="Background" Value="#FFEEEEEE" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderBrush" Value="#FFABADB3" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CornerRadius" Value="3" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />

		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Default Borders-->
	<Style x:Key="ImageBorder" TargetType="Border">
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
	</Style>
	<!--#endregion-->
	<!--#endregion-->

	<!--#region Tab controls on pages-->
	<Style x:Key="Default TabControl" TargetType="TabControl">
		<Setter Property="Background" Value="#FFE5E5E5" />
		<Setter Property="Margin" Value="0,15" />
	</Style>

	<Style x:Key="Default TabItem1" TargetType="TabItem">
		<Setter Property="BorderThickness" Value="1,1,1,0" />
		<Setter Property="Padding" Value="8" />
	</Style>

	<Style x:Key="Default TabItem" TargetType="TabItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TabItem">
					<Border
						Name="Border"
						Margin="5,0"
						BorderBrush="Gray"
						BorderThickness="1,1,1,0"
						CornerRadius="6,6,0,0"
						>
						<ContentPresenter
							x:Name="ContentSite"
							Margin="10,2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							ContentSource="Header"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="True">
							<Setter Property="FontStyle" Value="Normal" />
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="FontStyle" Value="Italic" />
							<Setter Property="Foreground" Value="LightGray" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="FontWeight" Value="DemiBold" />
							<Setter TargetName="Border" Property="Background" Value="#FFFFEA00" />
						</Trigger>
						<Trigger Property="IsSelected" Value="False">
							<Setter Property="FontWeight" Value="Normal" />
							<Setter TargetName="Border" Property="Background" Value="#FFE5E5E5" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Checkbox settings-->
	<!--#region Focus Styles for checkbox-->
	<Style x:Key="FocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="2"
						SnapsToDevicePixels="true"
						Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
						StrokeDashArray="1 2"
						StrokeThickness="1"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="OptionMarkFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="14,0,0,0"
						SnapsToDevicePixels="true"
						Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
						StrokeDashArray="1 2"
						StrokeThickness="1"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region  Defaul checkbox-->
	<Style x:Key="DefaultCheckBox" TargetType="CheckBox">
		<Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource OptionMark.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid
						x:Name="templateRoot"
						Background="Transparent"
						SnapsToDevicePixels="True"
						>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							x:Name="checkBoxBorder"
							Margin="1"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="100"
							>
							<Grid x:Name="markGrid">
								<Path
									x:Name="optionMark"
									Margin="1"
									Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									Stretch="None"
									/>
								<Rectangle
									x:Name="indeterminateMark"
									Margin="2"
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									/>
							</Grid>
						</Border>
						<ContentPresenter
							x:Name="contentPresenter"
							Grid.Column="1"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}" />
							<Setter Property="Padding" Value="4,-1,0,0" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.MouseOver.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.MouseOver.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Disabled.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Disabled.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Pressed.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Pressed.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
						</Trigger>

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
							<Setter TargetName="optionMark" Property="Opacity" Value="1" />
						</Trigger>

						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
							<Setter TargetName="optionMark" Property="Opacity" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Checkbox that is vissible if valueShow is checked-->
	<Style x:Key="HideOnNotShowCheckBox" TargetType="CheckBox">
		<Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource OptionMark.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid
						x:Name="templateRoot"
						Background="Transparent"
						SnapsToDevicePixels="True"
						>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							x:Name="checkBoxBorder"
							Margin="1"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="100"
							>
							<Grid x:Name="markGrid">
								<Path
									x:Name="optionMark"
									Margin="1"
									Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									Stretch="None"
									/>
								<Rectangle
									x:Name="indeterminateMark"
									Margin="2"
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									/>
							</Grid>
						</Border>
						<ContentPresenter
							x:Name="contentPresenter"
							Grid.Column="1"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}" />
							<Setter Property="Padding" Value="4,-1,0,0" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.MouseOver.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.MouseOver.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Disabled.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Disabled.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Pressed.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Pressed.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
						</Trigger>

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
							<Setter TargetName="optionMark" Property="Opacity" Value="1" />
						</Trigger>

						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
							<Setter TargetName="optionMark" Property="Opacity" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Checkbox that is vissible if valueShow is checked-->
	<Style x:Key="HideOnShowCheckBox" TargetType="CheckBox">
		<Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource OptionMark.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid
						x:Name="templateRoot"
						Background="Transparent"
						SnapsToDevicePixels="True"
						>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<Border
							x:Name="checkBoxBorder"
							Margin="1"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="100"
							>
							<Grid x:Name="markGrid">
								<Path
									x:Name="optionMark"
									Margin="1"
									Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									Stretch="None"
									/>
								<Rectangle
									x:Name="indeterminateMark"
									Margin="2"
									Fill="{StaticResource OptionMark.Static.Glyph}"
									Opacity="0"
									/>
							</Grid>
						</Border>
						<ContentPresenter
							x:Name="contentPresenter"
							Grid.Column="1"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}" />
							<Setter Property="Padding" Value="4,-1,0,0" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.MouseOver.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.MouseOver.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Disabled.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Disabled.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
						</Trigger>

						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Pressed.Background}" />
							<Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Pressed.Border}" />
							<Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
							<Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
						</Trigger>

						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
							<Setter TargetName="optionMark" Property="Opacity" Value="1" />
						</Trigger>

						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
							<Setter TargetName="optionMark" Property="Opacity" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#endregion-->

	<!--#region Textbox settings-->
	<!--#region Default Textbox, with rounded corners and Tag enabled-->
	<Style x:Key="DefaultTextBox" TargetType="TextBox">
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="Opacity" Value="0.56" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
						</Trigger>

						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.Focus.Border}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
					<Condition Property="IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Syncfusion: DoubleTextBox-->
	<Style x:Key="SyncfusionDoubleTextBox" TargetType="skin:DoubleTextBox">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CornerRadius" Value="5" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="UseNullOption" Value="True" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="WatermarkTextIsVisible" Value="True" />
	</Style>
	<!--#endregion-->

	<!--#region Default Textbox, with rounded corners and Tag enabled that listens to hidden valueShow checkbox-->
	<!--  If the ValueShow checkbox is unchecked the style will HIDE the element with the style, and make visible if checkbox is checked  -->
	<Style x:Key="HideOnNotShowTextBox" TargetType="TextBox">
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="Opacity" Value="0.56" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
						</Trigger>

						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.Focus.Border}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />

		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
					<Condition Property="IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
			</MultiTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Default Textbox, with rounded corners and Tag enabled that listens to hidden valueShow checkbox-->
	<!--  If the ValueShow checkbox is checked the style will HIDE the element with the style, and make visible if checkbox is unchecked  -->
	<Style x:Key="HideOnShowTextBox" TargetType="TextBox">
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="Opacity" Value="0.56" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.MouseOver.Border}" />
						</Trigger>

						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBox.Focus.Border}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />

		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
					<Condition Property="IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
			</MultiTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#endregion Textbox settings-->

	<!--#region Non Editable TextBox settings-->
	<!--#region NonEditableTextBox-->
	<Style x:Key="NonEditableTextBox" TargetType="TextBox">
		<Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SecondaryGrayColor}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border
						x:Name="txtBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Text" Value="" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<!--#endregion-->

	<!--#region Hide on Not Show NonEditableTextBox-->
	<Style x:Key="HideOnNotShowNonEditableTextBox" TargetType="TextBox">
		<Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SecondaryGrayColor}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border
						x:Name="txtBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Text" Value="" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Hide on Show NonEditableTextBox-->
	<Style x:Key="HideOnShowNonEditableTextBox" TargetType="TextBox">
		<Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SecondaryGrayColor}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="Height" Value="24" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Padding" Value="2,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border
						x:Name="txtBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3"
						SnapsToDevicePixels="True"
						>
						<Grid Margin="{TemplateBinding Padding}">
							<ScrollViewer
								x:Name="PART_ContentHost"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								/>
							<Label
								x:Name="WaterMarkLabel"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Tag}"
								FontStyle="Italic"
								FontWeight="{TemplateBinding FontWeight}"
								Foreground="{DynamicResource SecondaryGrayColor}"
								Visibility="Collapsed"
								/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
							</MultiTrigger.Conditions>
							<Setter TargetName="WaterMarkLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource SecondaryBlueColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Text" Value="" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#endregion-->

	<!--#region Datapicker Settings-->
	<!--#region Default Style for DataPicker Textbox-->
	<Style TargetType="DatePickerTextBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePickerTextBox}">
					<Grid>
						<Grid.Resources>
							<SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA" />
						</Grid.Resources>
						<Border
							x:Name="Border"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"
							Opacity="1"
							>
							<Grid
								x:Name="WatermarkContent"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								>
								<Border
									x:Name="ContentElement"
									BorderBrush="#FFFFFFFF"
									BorderThickness="1"
									/>
								<Border
									x:Name="watermark_decorator"
									BorderBrush="#FFFFFFFF"
									BorderThickness="1"
									>
									<ContentControl
										x:Name="PART_Watermark"
										Padding="2"
										Focusable="False"
										IsHitTestVisible="False"
										Opacity="0"
										>
										<ContentControl.Template>
											<ControlTemplate>
												<TextBlock Text="Selecteer datum" />
											</ControlTemplate>
										</ContentControl.Template>
									</ContentControl>
								</Border>
								<ScrollViewer
									x:Name="PART_ContentHost"
									Margin="0"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									/>
								<Border
									x:Name="FocusVisual"
									BorderBrush="#FF45D6FA"
									CornerRadius="1"
									IsHitTestVisible="False"
									Opacity="0"
									/>
							</Grid>
						</Border>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ContentElement"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											To="#FF99C1E2"
											Duration="0"
											/>
										<ColorAnimation
											Storyboard.TargetName="watermark_decorator"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											To="#FF99C1E2"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="WatermarkStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unwatermarked" />
								<VisualState x:Name="Watermarked">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ContentElement"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0"
											/>
										<DoubleAnimation
											Storyboard.TargetName="PART_Watermark"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="FocusVisual"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--#endregion-->

	<!--#region Style for DataPicker-->
	<Style x:Key="DefaultDataPicker" TargetType="DatePicker">
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
					<GradientStop Offset="0" Color="#FFA3AEB9" />
					<GradientStop Offset="0.375" Color="#FF8399A9" />
					<GradientStop Offset="0.375" Color="#FF718597" />
					<GradientStop Offset="1" Color="#FF617584" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FirstDayOfWeek" Value="Monday" />
		<Setter Property="Foreground" Value="#FF333333" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="IsTodayHighlighted" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="SelectedDateFormat" Value="Short" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						>
						<Grid
							x:Name="PART_Root"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							>
							<Grid.Resources>
								<ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
									<Grid>
										<Grid
											Width="19"
											Height="18"
											Margin="0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Background="#11FFFFFF"
											FlowDirection="LeftToRight"
											>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="23*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
											</Grid.RowDefinitions>
											<Image
												Grid.Row="0"
												Grid.RowSpan="4"
												Grid.Column="0"
												Grid.ColumnSpan="4"
												Source="\Resources\Icons\Calendar.png"
												/>
										</Grid>
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualStateGroup.Transitions>
													<VisualTransition GeneratedDuration="0" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
												</VisualStateGroup.Transitions>
												<VisualState x:Name="Normal" />
												<VisualState x:Name="Disabled" />
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
									</Grid>
								</ControlTemplate>
							</Grid.Resources>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<DatePickerTextBox
								x:Name="PART_TextBox"
								Grid.Row="0"
								Grid.Column="0"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Stretch"
								Focusable="{TemplateBinding Focusable}"
								/>
							<Grid
								x:Name="PART_DisabledVisual"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								IsHitTestVisible="False"
								Opacity="0"
								>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Popup
									x:Name="PART_Popup"
									AllowsTransparency="True"
									Placement="Bottom"
									PlacementTarget="{Binding ElementName=PART_TextBox}"
									StaysOpen="False"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="1"
									Width="19"
									Height="18"
									Margin="3,0,3,0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
							</Grid>
							<Button
								x:Name="PART_Button"
								Grid.Row="0"
								Grid.Column="1"
								Width="20"
								Margin="3,0,3,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Focusable="False"
								Foreground="{TemplateBinding Foreground}"
								Template="{StaticResource DropDownButtonTemplate}"
								/>
						</Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PART_DisabledVisual"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
							<Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>
	<!--#endregion-->

	<!--#region Style for HideOnNotShow DataPicker-->
	<Style x:Key="HideOnNotShowDataPicker" TargetType="DatePicker">
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
					<GradientStop Offset="0" Color="#FFA3AEB9" />
					<GradientStop Offset="0.375" Color="#FF8399A9" />
					<GradientStop Offset="0.375" Color="#FF718597" />
					<GradientStop Offset="1" Color="#FF617584" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FirstDayOfWeek" Value="Monday" />
		<Setter Property="Foreground" Value="#FF333333" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="IsTodayHighlighted" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="SelectedDateFormat" Value="Short" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						>
						<Grid
							x:Name="PART_Root"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							>
							<Grid.Resources>
								<ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
									<Grid>
										<Grid
											Width="19"
											Height="18"
											Margin="0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Background="#11FFFFFF"
											FlowDirection="LeftToRight"
											>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="23*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
											</Grid.RowDefinitions>
											<Image
												Grid.Row="0"
												Grid.RowSpan="4"
												Grid.Column="0"
												Grid.ColumnSpan="4"
												Source="\Resources\Icons\Calendar.png"
												/>
										</Grid>
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualStateGroup.Transitions>
													<VisualTransition GeneratedDuration="0" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
												</VisualStateGroup.Transitions>
												<VisualState x:Name="Normal" />
												<VisualState x:Name="Disabled" />
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
									</Grid>
								</ControlTemplate>
							</Grid.Resources>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<DatePickerTextBox
								x:Name="PART_TextBox"
								Grid.Row="0"
								Grid.Column="0"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Stretch"
								Focusable="{TemplateBinding Focusable}"
								/>
							<Grid
								x:Name="PART_DisabledVisual"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								IsHitTestVisible="False"
								Opacity="0"
								>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Popup
									x:Name="PART_Popup"
									AllowsTransparency="True"
									Placement="Bottom"
									PlacementTarget="{Binding ElementName=PART_TextBox}"
									StaysOpen="False"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="1"
									Width="19"
									Height="18"
									Margin="3,0,3,0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
							</Grid>
							<Button
								x:Name="PART_Button"
								Grid.Row="0"
								Grid.Column="1"
								Width="20"
								Margin="3,0,3,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Focusable="False"
								Foreground="{TemplateBinding Foreground}"
								Template="{StaticResource DropDownButtonTemplate}"
								/>
						</Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PART_DisabledVisual"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
							<Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region Style for HideOnShowDataPicker-->
	<Style x:Key="HideOnShowDataPicker" TargetType="DatePicker">
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
					<GradientStop Offset="0" Color="#FFA3AEB9" />
					<GradientStop Offset="0.375" Color="#FF8399A9" />
					<GradientStop Offset="0.375" Color="#FF718597" />
					<GradientStop Offset="1" Color="#FF617584" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FirstDayOfWeek" Value="Monday" />
		<Setter Property="Foreground" Value="#FF333333" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="IsTodayHighlighted" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="SelectedDateFormat" Value="Short" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						>
						<Grid
							x:Name="PART_Root"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							>
							<Grid.Resources>
								<ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
									<Grid>
										<Grid
											Width="19"
											Height="18"
											Margin="0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Background="#11FFFFFF"
											FlowDirection="LeftToRight"
											>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
												<ColumnDefinition Width="20*" />
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="23*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
												<RowDefinition Height="19*" />
											</Grid.RowDefinitions>
											<Image
												Grid.Row="0"
												Grid.RowSpan="4"
												Grid.Column="0"
												Grid.ColumnSpan="4"
												Source="\Resources\Icons\Calendar.png"
												/>
										</Grid>
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">
												<VisualStateGroup.Transitions>
													<VisualTransition GeneratedDuration="0" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
													<VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
												</VisualStateGroup.Transitions>
												<VisualState x:Name="Normal" />
												<VisualState x:Name="Disabled" />
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
									</Grid>
								</ControlTemplate>
							</Grid.Resources>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<DatePickerTextBox
								x:Name="PART_TextBox"
								Grid.Row="0"
								Grid.Column="0"
								HorizontalContentAlignment="Stretch"
								VerticalContentAlignment="Stretch"
								Focusable="{TemplateBinding Focusable}"
								/>
							<Grid
								x:Name="PART_DisabledVisual"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								IsHitTestVisible="False"
								Opacity="0"
								>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Popup
									x:Name="PART_Popup"
									AllowsTransparency="True"
									Placement="Bottom"
									PlacementTarget="{Binding ElementName=PART_TextBox}"
									StaysOpen="False"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
								<Rectangle
									Grid.Row="0"
									Grid.Column="1"
									Width="19"
									Height="18"
									Margin="3,0,3,0"
									Fill="#A5FFFFFF"
									RadiusX="1"
									RadiusY="1"
									/>
							</Grid>
							<Button
								x:Name="PART_Button"
								Grid.Row="0"
								Grid.Column="1"
								Width="20"
								Margin="3,0,3,0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
								Focusable="False"
								Foreground="{TemplateBinding Foreground}"
								Template="{StaticResource DropDownButtonTemplate}"
								/>
						</Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PART_DisabledVisual"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0"
											/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
							<Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Visibility" Value="Visible" />
		<Style.Triggers>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="False">
				<Setter Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding ElementName=valueShow, Path=IsChecked}" Value="True">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->
	<!--#endregion-->

	<Style x:Key="NonEditableNumericTextBox" TargetType="TextBox">
		<Setter Property="Background" Value="#FFEEEEEE" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="InputScope" Value="Number" />
		<Setter Property="IsEnabled" Value="False" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="Text" Value="{Binding Amount, Mode=TwoWay}" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<Style x:Key="NumericTextBox" TargetType="TextBox">
		<Setter Property="Background" Value="#FFEEEEEE" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="InputScope" Value="Number" />
		<Setter Property="IsEnabled" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="Text" Value="{Binding Amount, Mode=TwoWay}" />
		<Setter Property="TextWrapping" Value="NoWrap" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<Style x:Key="HiddenTextBox" TargetType="TextBox">
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Text" Value="" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Visibility" Value="Hidden" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="HiddenCheckBox" TargetType="CheckBox">
		<Setter Property="Visibility" Value="Hidden" />
	</Style>

	<Style x:Key="DefaultComboBox" TargetType="ComboBox">
		<Setter Property="Height" Value="23" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="IsTextSearchEnabled" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<Style x:Key="ProductImage" TargetType="Image">
		<Setter Property="Height" Value="230" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="230" />
	</Style>
	<!--#endregion-->

	<!--#region Default toolbar definitions-->
	<Style x:Key="DefaultToolBarTray" TargetType="ToolBarTray">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="DefaultToolBar" TargetType="ToolBar">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="ToolBarTray.IsLocked" Value="True" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="DefaultToolBarSeperator" TargetType="Separator">
		<Setter Property="Margin" Value="15,0,10,0" />
		<Setter Property="Padding" Value="2" />
	</Style>

	<Style x:Key="ImageToolBarTray" TargetType="ToolBarTray">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="ImageToolBar" TargetType="ToolBar">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="ToolBarTray.IsLocked" Value="True" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="ImageToolBarSeperator" TargetType="Separator">
		<Setter Property="Margin" Value="15,0,10,0" />
	</Style>

	<Style x:Key="RtfToolBarTray" TargetType="ToolBarTray">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="RtfToolBar" TargetType="ToolBar">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="ToolBarTray.IsLocked" Value="True" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Width" Value="Auto" />
	</Style>

	<Style x:Key="RtfToolBarSeperator" TargetType="Separator">
		<Setter Property="Margin" Value="15,0,10,0" />
		<Setter Property="Padding" Value="2" />
	</Style>
	<!--#endregion-->

	<!--#region  Button Icon resources-->
	<Style x:Key="ReceiptCancelIcon" TargetType="Image">
		<Setter Property="Height" Value="21" />
		<Setter Property="Margin" Value="0,0,10,0" />
		<Setter Property="Source" Value="\Resources\Icons\trashbin.png" />
	</Style>

	<Style x:Key="ReceiptAcceptIcon" TargetType="Image">
		<Setter Property="Height" Value="21" />
		<Setter Property="Margin" Value="0,0,10,0" />
		<Setter Property="Source" Value="\Resources\Icons\acceptreceipt.png" />
	</Style>

	<Style x:Key="GotoWebIcon" TargetType="Image">
		<Setter Property="Height" Value="21" />
		<Setter Property="Height" Value="25" />
		<Setter Property="Margin" Value="0,0,10,0" />
		<Setter Property="Source" Value="\Resources\Icons\btnWeb.png" />
	</Style>

	<Style x:Key="SendMailIcon" TargetType="Image">
		<Setter Property="Height" Value="31" />
		<Setter Property="Height" Value="35" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="Source" Value="{StaticResource mail}" />
	</Style>

	<!--#endregion  Button Icon resources-->

	<!--#region Toolbar Icon resources-->
	<Style x:Key="ToolBarAddIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="0,0,5,0" />
		<Setter Property="Source" Value="{StaticResource add}" />
	</Style>

	<Style x:Key="ToolBarCancelIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="5,0,0,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarCancel.png" />
	</Style>

	<Style x:Key="ToolBarDeleteIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="5,0,0,0" />
		<Setter Property="Source" Value="{StaticResource remove}" />
	</Style>

	<Style x:Key="ToolBarResetIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="5,0,0,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarReset.png" />
	</Style>

	<Style x:Key="ToolBarSaveIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="5,0,5,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarSave.png" />
	</Style>

	<Style x:Key="ToolBarRotateIcon" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="5,0,0,0" />
		<Setter Property="Source" Value="{StaticResource rotate}" />
	</Style>

	<Style x:Key="ToolBarSmallAddIcon" TargetType="Image">
		<Setter Property="Height" Value="12" />
		<Setter Property="Margin" Value="0,0,4,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarSmallAdd.png" />
	</Style>

	<Style x:Key="ToolBarSmallCancelIcon" TargetType="Image">
		<Setter Property="Height" Value="12" />
		<Setter Property="Margin" Value="4,0,0,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarSmallCancel.png" />
	</Style>

	<Style x:Key="ToolBarSmallDeleteIcon" TargetType="Image">
		<Setter Property="Height" Value="12" />
		<Setter Property="Margin" Value="4,0,0,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarSmallDelete.png" />
	</Style>

	<Style x:Key="ToolBarSmallSaveIcon" TargetType="Image">
		<Setter Property="Height" Value="12" />
		<Setter Property="Margin" Value="4,0,4,0" />
		<Setter Property="Source" Value="\Resources\Icons\toolbarSmallSave.png" />
	</Style>

	<!--#region RTF Toolbar Icon resources-->
	<Style x:Key="RtfToolBarCutIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarCut.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarCopyIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarCopy.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarPasteIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarPaste.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarUndoIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarUndo.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarRedoIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarRedo.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarBoldIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarBold.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarItalicIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarItalic.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarUnderlineIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarUnderline.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarStrikeoutIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarStrikeout.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarTextcolorIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarTextcolor.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarBackcolorIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarBackcolor.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarAlignLeftIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarAlignLeft.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarAlignCenterIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarAlignCenter.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarAlignRightIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarAlignRight.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarBulletListIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarBulletList.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarNumbersListIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarNumbersList.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarIndentIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarIndent.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarIndentRemoveIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarIndentRemove.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarSubscriptIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarSubscript.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>

	<Style x:Key="RtfToolBarSuperscriptIcon" TargetType="Image">
		<Setter Property="Source" Value="\Resources\Icons\rtftoolbarSuperscript.png" />
		<Setter Property="Stretch" Value="None" />
	</Style>
	<!--#endregion-->
	<!--#endregion-->

	<!--#region Default DataGrid resources-->
	<Style x:Key="DefaultDataGrid" TargetType="DataGrid">
		<Setter Property="AlternatingRowBackground" Value="AliceBlue" />
		<Setter Property="AutoGenerateColumns" Value="False" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="IsReadOnly" Value="False" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
	</Style>
	<!--#endregion-->

	<!--#region Header group resources-->
	<Style x:Key="ImageHeaderGroup" TargetType="Image">
		<Setter Property="Height" Value="14" />
		<Setter Property="Margin" Value="3" />
	</Style>
	<!--#endregion-->

	<!--#region Hide the Toggle button for ComboBox-->
	<Style x:Key="ComboBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="4,4,21,4"
						SnapsToDevicePixels="true"
						Stroke="Black"
						StrokeDashArray="1 2"
						StrokeThickness="1"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Offset="0" Color="#F3F3F3" />
		<GradientStop Offset="0.5" Color="#EBEBEB" />
		<GradientStop Offset="0.5" Color="#DDDDDD" />
		<GradientStop Offset="1" Color="#CDCDCD" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />
	<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
	<Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<t:ButtonChrome
						x:Name="Chrome"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						RenderMouseOver="{TemplateBinding IsMouseOver}"
						RenderPressed="{TemplateBinding IsPressed}"
						SnapsToDevicePixels="true"
						>
						<!-- Remove ToggleButton appearance; we still need the ToggleButton because it displays the content.
						<Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
							<Path x:Name="Arrow" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center" Data="{StaticResource DownArrowGeometry}" />
						</Grid>
						-->
					</t:ButtonChrome>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Chrome" Property="RenderPressed" Value="true" />
						</Trigger>
						<!-- Remove ToggleButton appearance trigger
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
						</Trigger>
						-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush x:Key="TextBoxBorder" MappingMode="Absolute" StartPoint="0,0" EndPoint="0,20">
		<GradientStop Offset="0.05" Color="#ABADB3" />
		<GradientStop Offset="0.07" Color="#E2E3EA" />
		<GradientStop Offset="1" Color="#E3E9EF" />
	</LinearGradientBrush>
	<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer
						x:Name="PART_ContentHost"
						Background="Transparent"
						Focusable="false"
						HorizontalScrollBarVisibility="Hidden"
						VerticalScrollBarVisibility="Hidden"
						/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<t:ButtonChrome
						x:Name="Chrome"
						Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						RenderMouseOver="{TemplateBinding IsMouseOver}"
						RenderPressed="{TemplateBinding IsPressed}"
						RoundCorners="false"
						SnapsToDevicePixels="true"
						>
						<Path
							x:Name="Arrow"
							Margin="0,1,0,0"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="{StaticResource DownArrowGeometry}"
							Fill="Black"
							/>
					</t:ButtonChrome>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="Chrome" Property="RenderPressed" Value="true" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="Placement" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Popup
				x:Name="PART_Popup"
				Grid.ColumnSpan="2"
				AllowsTransparency="true"
				IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				Placement="Bottom"
				PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
				>
				<t:SystemDropShadowChrome
					x:Name="Shdw"
					MinWidth="{Binding ActualWidth, ElementName=Placement}"
					MaxHeight="{TemplateBinding MaxDropDownHeight}"
					Color="Transparent"
					>
					<Border
						x:Name="DropDownBorder"
						Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
						BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
						BorderThickness="1"
						>
						<ScrollViewer>
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
				</t:SystemDropShadowChrome>
			</Popup>
			<t:ListBoxChrome
				x:Name="Border"
				Grid.ColumnSpan="2"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
				RenderMouseOver="{TemplateBinding IsMouseOver}"
				/>
			<TextBox
				x:Name="PART_EditableTextBox"
				Margin="{TemplateBinding Padding}"
				HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
				IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
				Style="{StaticResource ComboBoxEditableTextBox}"
				/>
			<!-- Remove the ToggleButton button; now you make the textbox clickable....
				<ToggleButton Style="{StaticResource ComboBoxToggleButton}" Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
			-->
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsKeyboardFocusWithin" Value="true">
				<Setter Property="Foreground" Value="Black" />
			</Trigger>
			<Trigger Property="IsDropDownOpen" Value="true">
				<Setter TargetName="Border" Property="RenderFocused" Value="true" />
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter TargetName="DropDownBorder" Property="Height" Value="95" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Background" Value="#FFF4F4F4" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
			<Trigger Property="IsGrouping" Value="true">
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</Trigger>
			<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
				<Setter TargetName="Shdw" Property="Color" Value="#71000000" />
				<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="ButtonlessComboBoxStyle" TargetType="{x:Type ComboBox}">
		<Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ButtonNormalBorder}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource ComboBoxFocusVisual}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="Padding" Value="4,3" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
						</Grid.ColumnDefinitions>
						<Popup
							x:Name="PART_Popup"
							Grid.ColumnSpan="2"
							Margin="1"
							AllowsTransparency="true"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
							>
							<t:SystemDropShadowChrome
								x:Name="Shdw"
								MinWidth="{Binding ActualWidth, ElementName=MainGrid}"
								MaxHeight="{TemplateBinding MaxDropDownHeight}"
								Color="Transparent"
								>
								<Border
									x:Name="DropDownBorder"
									Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
									BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
									BorderThickness="1"
									>
									<ScrollViewer CanContentScroll="true">
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</ScrollViewer>
								</Border>
							</t:SystemDropShadowChrome>
						</Popup>
						<ToggleButton
							Grid.ColumnSpan="2"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{StaticResource ComboBoxReadonlyToggleButton}"
							/>
						<ContentPresenter
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding SelectionBoxItem}"
							ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							IsHitTestVisible="false"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
							<Setter TargetName="Shdw" Property="Color" Value="#71000000" />
							<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="DropDownBorder" Property="Height" Value="95" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="#FFF4F4F4" />
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}" />
				<Setter Property="IsTabStop" Value="false" />
				<Setter Property="Padding" Value="3" />
				<Setter Property="Template" Value="{DynamicResource ComboBoxEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--#endregion-->

	<!--#region WHite button with Rounded Corners-->
	<Style x:Key="ButtonRoundedWhite" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderBrush" Value="Blue" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="Foreground" Value="DarkBlue" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="5"
						SnapsToDevicePixels="true"
						>
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="LightGray" />
							<Setter TargetName="border" Property="BorderBrush" Value="DarkRed" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="#FFF3BB" />
							<Setter TargetName="border" Property="BorderBrush" Value="DarkBlue" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="TextElement.FontStyle" Value="Italic" />
							<Setter TargetName="border" Property="Background" Value="#DFB6B4B4" />
							<Setter TargetName="border" Property="BorderBrush" Value="Gray" />
							<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="Gray" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<LinearGradientBrush x:Key="PopupBackground" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.028" Color="#FFE8EBED" />
		<GradientStop Offset="0.982" Color="#FFD1D8E2" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="PopupBorder" Color="#FF646464" />
	<SolidColorBrush x:Key="SplitButtonAdvBorderBrush" Color="#FF707070" />
	<LinearGradientBrush x:Key="SplitButtonAdvBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.469" Color="#FFECECEC" />
		<GradientStop Offset="0.531" Color="#FFDBDBDB" />
		<GradientStop Offset="0.954" Color="#FFD0D0D0" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="SplitButtonAdvForeground" Color="#FF1B293E" />
	<LinearGradientBrush x:Key="SplitButtonAdvInnerBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="White" />
		<GradientStop Offset="1" Color="#FFE8E8E8" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="SplitButtonAdvHoverBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.465" Color="#FFDBF1FC" />
		<GradientStop Offset="0.526" Color="#FFBCE5FC" />
		<GradientStop Offset="0.991" Color="#FFAADBF6" />
		<GradientStop Offset="1" Color="#FFD6EDFA" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="SplitButtonAdvHoverBorderBrush" Color="#FF3C7FB1" />
	<LinearGradientBrush x:Key="SplitButtonAdvHoverInnerBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="#FFFEFFFF" />
		<GradientStop Offset="1" Color="#FFD6EDFA" />
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="SplitButtonAdvPressedBackgroundBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0.036" Color="#FF8CA1AC" />
		<GradientStop Offset="0.048" Color="#FFB0CDDD" />
		<GradientStop Offset="0.084" Color="#FFB0CDDD" />
		<GradientStop Offset="0.096" Color="#FFC2E4F6" />
		<GradientStop Offset="0.468" Color="#FFC2E4F6" />
		<GradientStop Offset="0.532" Color="#FFA8D9F2" />
		<GradientStop Offset="0.964" Color="#FF91CCEB" />
	</LinearGradientBrush>
	<SolidColorBrush x:Key="SplitButtonAdvPressedBorderBrush" Color="#FF2C628B" />
	<SolidColorBrush x:Key="SplitButtonAdvHoverForeground" Color="#FF000000" />
	<DataTemplate x:Key="LargeIconTemplate">
		<Image
			x:Name="LargeImage"
			Width="{Binding Width, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			Height="{Binding Height, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			Source="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			/>
	</DataTemplate>
	<DataTemplate x:Key="SmallIconTemplate">
		<Image
			x:Name="smallimage"
			Width="{Binding Width, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			Height="{Binding Height, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			Source="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}"
			/>
	</DataTemplate>
	<ControlTemplate x:Key="LargeModeTemplate" TargetType="{x:Type local:SplitButtonAdv}">
		<Grid>
			<Popup
				x:Name="PART_DropDown"
				AllowsTransparency="True"
				Placement="Bottom"
				StaysOpen="{TemplateBinding StaysOpen}"
				>
				<Grid MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}">
					<Border
						Background="{StaticResource PopupBackground}"
						BorderBrush="{StaticResource PopupBorder}"
						BorderThickness="1"
						CornerRadius="0"
						>
						<Border
							Background="{StaticResource PopupBackground}"
							BorderBrush="{StaticResource PopupBorder}"
							BorderThickness="0"
							CornerRadius="3"
							>
							<ContentPresenter />
						</Border>
					</Border>
				</Grid>
			</Popup>
			<!--  Button Area  -->
			<Border
				x:Name="ItemBorder"
				MinHeight="32"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness=".25"
				CornerRadius="5"
				Cursor="Hand"
				SnapsToDevicePixels="True"
				>
				<Border
					x:Name="InnerBorder"
					Background="Transparent"
					BorderBrush="{StaticResource SplitButtonAdvInnerBorderBrush}"
					BorderThickness=".5"
					CornerRadius="5"
					>
					<Grid Margin="{TemplateBinding Padding}">
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<Border
							x:Name="PART_Button"
							Grid.Row="0"
							Background="Transparent"
							Focusable="True"
							>
							<ContentPresenter
								x:Name="LargeIconContent"
								MinWidth="{TemplateBinding MinWidth}"
								MinHeight="{TemplateBinding MinHeight}"
								Margin="1"
								Content="{Binding}"
								ContentTemplate="{TemplateBinding IconTemplate}"
								ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"
								/>
						</Border>
						<Border
							x:Name="PART_DropDownButton"
							Grid.Row="1"
							Background="Transparent"
							BorderBrush="{StaticResource SplitButtonAdvBorderBrush}"
							BorderThickness="0,.5,0,0"
							Focusable="True"
							>
							<Border
								x:Name="InnerDropBorder"
								Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="1"
								CornerRadius="1"
								>
								<StackPanel Orientation="Horizontal">
									<TextBlock
										x:Name="PART_LargeText"
										Margin="1"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Focusable="False"
										Text="{TemplateBinding Label}"
										/>
									<Path
										x:Name="Arrow"
										Margin="1"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Data="F0 M 0,0 L 4,4 8,0 Z"
										Fill="{TemplateBinding Foreground}"
										/>
								</StackPanel>
							</Border>
						</Border>
					</Grid>
				</Border>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="skin:SkinStorage.EnableTouch" Value="true">
				<Setter Property="MinHeight" Value="30" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
					<Condition SourceName="PART_DropDownButton" Property="IsMouseOver" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverInnerBorderBrush}" />
				<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvHoverBackgroundBrush}" />
				<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
				<Setter TargetName="PART_DropDownButton" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
					<Condition SourceName="PART_DropDownButton" Property="IsMouseOver" Value="true" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
					<Condition SourceName="PART_Button" Property="IsMouseOver" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverInnerBorderBrush}" />
				<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvHoverBackgroundBrush}" />
				<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
				<Setter TargetName="PART_DropDownButton" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
					<Condition SourceName="PART_Button" Property="IsMouseOver" Value="true" />
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBackgroundBrush}" />
				<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvPressedBackgroundBrush}" />
				<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBorderBrush}" />
				<Setter TargetName="PART_DropDownButton" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBorderBrush}" />
			</Trigger>
			<Trigger Property="IsDropDownPressed" Value="True" />
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="ItemBorder" Property="Opacity" Value="0.5" />
			</Trigger>
			<Trigger Property="IsMultiLine" Value="True">
				<Setter TargetName="PART_LargeText" Property="TextWrapping" Value="Wrap" />
			</Trigger>
			<Trigger Property="IsMultiLine" Value="False">
				<Setter TargetName="PART_LargeText" Property="TextWrapping" Value="NoWrap" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IconTemplate" Value="{x:Null}" />
					<Condition Property="IconTemplateSelector" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="LargeIconContent" Property="ContentTemplate" Value="{DynamicResource LargeIconTemplate}" />
				<Setter TargetName="LargeIconContent" Property="Tag" Value="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style TargetType="{x:Type local:SplitButtonAdv}">
		<Setter Property="Background" Value="{DynamicResource SplitButtonAdvBackgroundBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource SplitButtonAdvBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource SplitButtonAdvForeground}" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Label" Value="Split Button" />
		<Setter Property="LargeIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt32.png" />
		<Setter Property="SmallIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt16.png" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:SplitButtonAdv}">
					<Grid Focusable="False">
						<Popup
							x:Name="PART_DropDown"
							AllowsTransparency="True"
							Placement="Bottom"
							StaysOpen="{TemplateBinding StaysOpen}"
							>
							<Grid
								x:Name="Part_GridPopup"
								MinWidth="{TemplateBinding MinWidth}"
								MinHeight="{TemplateBinding MinHeight}"
								>
								<Border
									Background="{StaticResource PopupBackground}"
									BorderBrush="{StaticResource PopupBorder}"
									BorderThickness="1"
									CornerRadius="0"
									>
									<Border
										Background="{StaticResource PopupBackground}"
										BorderBrush="{StaticResource PopupBorder}"
										BorderThickness="0"
										CornerRadius="1"
										>
										<ContentPresenter />
									</Border>
								</Border>
							</Grid>
						</Popup>
						<Border
							x:Name="ItemBorder"
							MinHeight="22"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"
							SnapsToDevicePixels="True"
							>
							<Border
								x:Name="InnerBorder"
								Background="Transparent"
								BorderBrush="{StaticResource SplitButtonAdvInnerBorderBrush}"
								BorderThickness="1"
								CornerRadius="3"
								>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Border
										x:Name="PART_ButtonNormal"
										Grid.Column="0"
										Background="Transparent"
										Focusable="True"
										>
										<Grid
											Margin="{TemplateBinding Padding}"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto" />
												<ColumnDefinition />
											</Grid.ColumnDefinitions>
											<ContentPresenter
												x:Name="SmallIconContent"
												Margin="2"
												Content="{Binding}"
												ContentTemplate="{TemplateBinding IconTemplate}"
												ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"
												/>
											<TextBlock
												x:Name="PART_NormalText"
												Grid.Column="1"
												Margin="2,0,2,0"
												HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
												VerticalAlignment="{TemplateBinding VerticalAlignment}"
												Foreground="{StaticResource SplitButtonAdvForeground}"
												Text="{TemplateBinding Label}"
												TextBlock.FontFamily="{TemplateBinding FontFamily}"
												TextBlock.FontSize="{TemplateBinding FontSize}"
												/>
										</Grid>
									</Border>
									<Border
										x:Name="PART_DropDownButtonNormal"
										Grid.Column="1"
										Background="Transparent"
										BorderBrush="{StaticResource SplitButtonAdvBorderBrush}"
										BorderThickness="1,0,0,0"
										Focusable="True"
										>
										<Path
											x:Name="Arrow"
											Margin="2,0,2,0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Data="F0 M 0,0 L 4,4 8,0 Z"
											Fill="{StaticResource SplitButtonAdvForeground}"
											/>
									</Border>
								</Grid>
							</Border>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="skin:SkinStorage.EnableTouch" Value="true">
							<Setter Property="MinHeight" Value="30" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
								<Condition SourceName="PART_DropDownButtonNormal" Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverInnerBorderBrush}" />
							<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvHoverBackgroundBrush}" />
							<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
							<Setter TargetName="PART_DropDownButtonNormal" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
							<Setter TargetName="PART_NormalText" Property="Foreground" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
								<Condition SourceName="PART_DropDownButtonNormal" Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
								<Condition SourceName="PART_ButtonNormal" Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverInnerBorderBrush}" />
							<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvHoverBackgroundBrush}" />
							<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
							<Setter TargetName="PART_DropDownButtonNormal" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvHoverBorderBrush}" />
							<Setter TargetName="PART_NormalText" Property="Foreground" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
								<Condition SourceName="PART_ButtonNormal" Property="IsMouseOver" Value="true" />
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
							<Setter TargetName="PART_NormalText" Property="Foreground" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="false" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
							<Setter TargetName="PART_NormalText" Property="Foreground" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="skin:SkinStorage.EnableTouch" Value="true" />
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
							<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBackgroundBrush}" />
							<Setter TargetName="ItemBorder" Property="Background" Value="{DynamicResource SplitButtonAdvPressedBackgroundBrush}" />
							<Setter TargetName="ItemBorder" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBorderBrush}" />
							<Setter TargetName="PART_DropDownButtonNormal" Property="BorderBrush" Value="{DynamicResource SplitButtonAdvPressedBorderBrush}" />
							<Setter TargetName="PART_NormalText" Property="Foreground" Value="{DynamicResource SplitButtonAdvHoverForeground}" />
						</Trigger>
						<Trigger Property="IsDropDownPressed" Value="True" />
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="ItemBorder" Property="Opacity" Value="0.5" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IconTemplate" Value="{x:Null}" />
								<Condition Property="IconTemplateSelector" Value="{x:Null}" />
							</MultiTrigger.Conditions>
							<Setter TargetName="SmallIconContent" Property="ContentTemplate" Value="{DynamicResource SmallIconTemplate}" />
							<Setter TargetName="SmallIconContent" Property="Tag" Value="{Binding SmallIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Style.Triggers>
			<Trigger Property="SizeMode" Value="Large">
				<Setter Property="Template" Value="{DynamicResource LargeModeTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>